name: Android Debug APK (NDK27 hardened)

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - "**/*.dart"
      - "pubspec.yaml"
      - ".github/workflows/android-debug.yml"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Java 17 (AGP compatible)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true

      - name: Detect Flutter app directory
        id: detect_dir
        run: |
          set -e
          APP_DIR="."
          for d in "." "shell_app" "app" "mobile" "client"; do
            if [ -f "$d/pubspec.yaml" ]; then APP_DIR="$d"; break; fi
          done
          echo "APP_DIR=$APP_DIR" >> "$GITHUB_ENV"
          echo "Detected APP_DIR=$APP_DIR"

      # Instala cmdline-tools si sdkmanager no existe
      - name: Ensure Android cmdline-tools (sdkmanager)
        run: |
          set -e
          SDK="${ANDROID_SDK_ROOT:-/usr/local/lib/android/sdk}"
          echo "ANDROID_SDK_ROOT=$SDK"
          SDKMAN="$SDK/cmdline-tools/latest/bin/sdkmanager"
          if [ ! -x "$SDKMAN" ]; then
            echo "Installing Android cmdline-tools (sdkmanager)..."
            mkdir -p "$SDK/cmdline-tools"
            cd "$SDK/cmdline-tools"
            curl -sSL https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip -o cmdline-tools.zip
            unzip -q cmdline-tools.zip
            rm -f cmdline-tools.zip
            rm -rf latest
            mv cmdline-tools latest
            SDKMAN="$SDK/cmdline-tools/latest/bin/sdkmanager"
          fi
          "$SDKMAN" --version

      - name: Regenerate Android project (Flutter 3.27+)
        run: |
          set -e
          cd "$APP_DIR"
          rm -rf android
          flutter create --platforms=android .

      - name: Accept licenses & install NDK 27.0.12077973
        run: |
          set -e
          SDKMAN="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager"
          yes | "$SDKMAN" --licenses >/dev/null
          yes | "$SDKMAN" --install "ndk;27.0.12077973"
          echo "Installed NDKs:"
          ls -la "$ANDROID_SDK_ROOT/ndk" || true

      - name: Resolve installed NDK 27.x and write ndk.dir
        run: |
          set -e
          APP_DIR="${APP_DIR:-.}"
          NDK_ROOT="$ANDROID_SDK_ROOT/ndk"
          echo "SDK root: $ANDROID_SDK_ROOT"
          ls -la "$NDK_ROOT" || true
          CANDIDATE=""
          if [ -d "$NDK_ROOT" ]; then
            CANDIDATE=$(ls -1 "$NDK_ROOT" | grep '^27' | sort -V | tail -n1 || true)
          fi
          if [ -z "$CANDIDATE" ] || [ ! -f "$NDK_ROOT/$CANDIDATE/source.properties" ]; then
            echo "No valid NDK 27 found. Installing exact 27.0.12077973..."
            SDKMAN="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager"
            yes | "$SDKMAN" --install "ndk;27.0.12077973"
            CANDIDATE="27.0.12077973"
          fi
          echo "Using NDK: $NDK_ROOT/$CANDIDATE"
          LP="$APP_DIR/android/local.properties"
          mkdir -p "$APP_DIR/android"
          touch "$LP"
          grep -v '^ndk\.dir=' "$LP" > "$LP.tmp" 2>/dev/null || true
          mv "$LP.tmp" "$LP" 2>/dev/null || true
          echo "ndk.dir=$NDK_ROOT/$CANDIDATE" >> "$LP"
          echo "--- local.properties ---"
          cat "$LP"

      - name: Inject ndkVersion into Gradle files
        run: |
          set -e
          python3 - <<'PY'
          import io, os, re
          app_dir = os.environ.get('APP_DIR','.') or '.'
          for path in [os.path.join(app_dir,'android','app','build.gradle.kts'),
                       os.path.join(app_dir,'android','app','build.gradle')]:
              if os.path.isfile(path):
                  with io.open(path,'r',encoding='utf-8') as f:
                      s=f.read()
                  if 'ndkVersion' not in s:
                      if path.endswith('.kts'):
                          s=re.sub(r'(android\s*\{)', r'\1\n    ndkVersion = "27.0.12077973"', s, count=1)
                      else:
                          s=re.sub(r'(android\s*\{)', r"\1\n    ndkVersion '27.0.12077973'", s, count=1)
                      with io.open(path,'w',encoding='utf-8') as f:
                          f.write(s)
                      print(f'Injected ndkVersion into {path}')
                  else:
                      print(f'ndkVersion already present in {path}')
          props=os.path.join(app_dir,'android','gradle.properties')
          os.makedirs(os.path.dirname(props), exist_ok=True)
          lines=[]
          if os.path.exists(props):
              with io.open(props,'r',encoding='utf-8') as f:
                  lines=f.read().splitlines()
          if not any(line.startswith('android.ndkVersion=') for line in lines):
              lines.append('android.ndkVersion=27.0.12077973')
              with io.open(props,'w',encoding='utf-8') as f:
                  f.write('\n'.join(lines)+'\n')
              print('Added android.ndkVersion to gradle.properties')
          else:
              print('gradle.properties already has android.ndkVersion')
          PY

      - name: Flutter pub get
        run: |
          cd "$APP_DIR"
          flutter pub get

      - name: Build debug APK
        run: |
          cd "$APP_DIR"
          flutter build apk --debug

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-debug.apk
          path: ${{ env.APP_DIR }}/build/app/outputs/flutter-apk/app-debug.apk
          if-no-files-found: error
