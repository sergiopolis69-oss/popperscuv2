name: Android Debug APK (NDK27 clean)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Java 17 (AGP compatible)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true

      - name: Detect Flutter app directory
        id: detect_dir
        run: |
          set -e
          APP_DIR="."
          for d in "." "shell_app" "app" "mobile" "client"; do
            if [ -f "$d/pubspec.yaml" ]; then APP_DIR="$d"; break; fi
          done
          echo "APP_DIR=$APP_DIR" >> "$GITHUB_ENV"
          echo "Detected APP_DIR=$APP_DIR"

      - name: Ensure Android cmdline-tools (sdkmanager)
        run: |
          set -e
          SDK="${ANDROID_SDK_ROOT:-/usr/local/lib/android/sdk}"
          echo "ANDROID_SDK_ROOT=$SDK"
          SDKMAN="$SDK/cmdline-tools/latest/bin/sdkmanager"
          if [ ! -x "$SDKMAN" ]; then
            echo "Installing Android cmdline-tools (sdkmanager)..."
            mkdir -p "$SDK/cmdline-tools"
            cd "$SDK/cmdline-tools"
            curl -sSL https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip -o cmdline-tools.zip
            unzip -q cmdline-tools.zip
            rm -f cmdline-tools.zip
            rm -rf latest
            mv cmdline-tools latest
            SDKMAN="$SDK/cmdline-tools/latest/bin/sdkmanager"
          fi
          "$SDKMAN" --version

      - name: Accept licenses & ensure at least one NDK 27.x
        run: |
          set -e
          SDKMAN="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager"
          yes | "$SDKMAN" --licenses >/dev/null
          yes | "$SDKMAN" --install "ndk;27.0.12077973" || true
          echo "Installed NDKs:"
          ls -la "$ANDROID_SDK_ROOT/ndk" || true

      - name: Resolve NDK 27.x and write local.properties (ndk.dir + flutter.ndkVersion)
        run: |
          set -e
          APP_DIR="${APP_DIR:-.}"
          NDK_ROOT="$ANDROID_SDK_ROOT/ndk"
          CANDIDATE=""
          if [ -d "$NDK_ROOT" ]; then
            CANDIDATE=$(ls -1 "$NDK_ROOT" | grep '^27' | sort -V | tail -n1 || true)
          fi
          if [ -z "$CANDIDATE" ] || [ ! -f "$NDK_ROOT/$CANDIDATE/source.properties" ]; then
            SDKMAN="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager"
            yes | "$SDKMAN" --install "ndk;27.0.12077973"
            CANDIDATE="27.0.12077973"
          fi
          echo "Using NDK: $NDK_ROOT/$CANDIDATE"
          echo "NDK_CAND=$CANDIDATE" >> "$GITHUB_ENV"

          LP="$APP_DIR/android/local.properties"
          mkdir -p "$APP_DIR/android"
          touch "$LP"
          { grep -v -E '^(ndk\.dir|flutter\.ndkVersion)=' "$LP" 2>/dev/null || true; } > "$LP.tmp"
          mv "$LP.tmp" "$LP"
          echo "ndk.dir=$NDK_ROOT/$CANDIDATE" >> "$LP"
          echo "flutter.ndkVersion=$CANDIDATE" >> "$LP"
          echo "--- local.properties ---"
          cat "$LP"

      - name: Reset android/gradle.properties (clean & synced)
        run: |
          set -e
          APP_DIR="${APP_DIR:-.}"
          cat > "$APP_DIR/android/gradle.properties" <<EOF
org.gradle.jvmargs=-Xmx4G -XX:MaxMetaspaceSize=1024m -XX:ReservedCodeCacheSize=512m -Dfile.encoding=UTF-8
android.useAndroidX=true
android.enableJetifier=true
android.ndkVersion=${NDK_CAND}
EOF
          echo "=== android/gradle.properties ==="
          cat "$APP_DIR/android/gradle.properties"

      - name: Patch Gradle files to 27.x (project & app)
        run: |
          set -e
          python3 - <<'PY'
          import io, os, re
          app_dir = os.environ.get('APP_DIR','.') or '.'
          ndk = os.environ.get('NDK_CAND','27.0.12077973')

          def patch_file(path):
            if not os.path.isfile(path): return
            with io.open(path,'r',encoding='utf-8') as f: s=f.read()
            s2 = s
            # android.ndkVersion=...
            s2 = re.sub(r'(["\'])android\.ndkVersion\1\s*[:=]\s*(["\'])[0-9\.]+(["\'])',
                        lambda m: f'{m.group(1)}android.ndkVersion{m.group(1)} = "{ndk}"', s2)
            s2 = re.sub(r'extra\[\s*(["\'])android\.ndkVersion\1\s*\]\s*=\s*(["\'])[0-9\.]+(["\'])',
                        lambda m: f'extra["android.ndkVersion"] = "{ndk}"', s2)
            # ndkVersion "..."
            s2 = re.sub(r'ndkVersion\s*=\s*"(?:\d|\.)+"', f'ndkVersion = "{ndk}"', s2)
            s2 = re.sub(r"ndkVersion\s*'(?:\d|\.)+'",     f"ndkVersion '{ndk}'", s2)
            # catÃ¡logos (opcional)
            s2 = re.sub(r'(?im)^\s*ndk(?:Version)?\s*=\s*"(?:26\.[^"]+)"', f'ndkVersion = "{ndk}"', s2)
            if s2 != s:
              with io.open(path,'w',encoding='utf-8') as f: f.write(s2)
              print(f"[patched] {path}")
            else:
              print(f"[ok] {path}")

          for rel in [
            'android/build.gradle.kts','android/build.gradle',
            'android/app/build.gradle.kts','android/app/build.gradle',
            'android/gradle/libs.versions.toml'
          ]:
            patch_file(os.path.join(app_dir, rel))
          PY

      - name: Fresh Gradle home (isolate & clean)
        run: |
          set -e
          GH="$RUNNER_TEMP/.gradle"
          mkdir -p "$GH"
          echo "GRADLE_USER_HOME=$GH" >> "$GITHUB_ENV"
          unset GRADLE_OPTS
          cat > "$GH/gradle.properties" <<'EOF'
org.gradle.jvmargs=-Xmx4G -XX:MaxMetaspaceSize=1024m -XX:ReservedCodeCacheSize=512m -Dfile.encoding=UTF-8
EOF
          echo "=== $GH/gradle.properties ==="
          cat "$GH/gradle.properties"

      - name: Stop any Gradle daemons (ensure fresh)
        run: |
          set -e
          cd "$APP_DIR/android"
          ./gradlew --stop || true

      - name: Flutter pub get
        run: |
          cd "$APP_DIR"
          flutter pub get

      - name: Build debug APK
        env:
          ORG_GRADLE_PROJECT_android_ndkVersion: ${{ env.NDK_CAND }}
          GRADLE_USER_HOME: ${{ env.GRADLE_USER_HOME }}
        run: |
          cd "$APP_DIR"
          echo "Building with android.ndkVersion=${ORG_GRADLE_PROJECT_android_ndkVersion}"
          flutter build apk --debug

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-debug.apk
          path: ${{ env.APP_DIR }}/build/app/outputs/flutter-apk/app-debug.apk
          if-no-files-found: error
