name: Android Debug APK (NDK27 synced + props sanitized)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Java 17 (AGP compatible)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true

      - name: Detect Flutter app directory
        run: |
          set -e
          APP_DIR="."
          for d in "." "shell_app" "app" "mobile" "client"; do
            if [ -f "$d/pubspec.yaml" ]; then APP_DIR="$d"; break; fi
          done
          echo "APP_DIR=$APP_DIR" >> "$GITHUB_ENV"
          echo "Detected APP_DIR=$APP_DIR"

      - name: Ensure Android cmdline-tools (sdkmanager)
        run: |
          set -e
          SDK="${ANDROID_SDK_ROOT:-/usr/local/lib/android/sdk}"
          SDKMAN="$SDK/cmdline-tools/latest/bin/sdkmanager"
          if [ ! -x "$SDKMAN" ]; then
            mkdir -p "$SDK/cmdline-tools"
            cd "$SDK/cmdline-tools"
            curl -sSL https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip -o cmdline-tools.zip
            unzip -q cmdline-tools.zip
            rm -f cmdline-tools.zip
            rm -rf latest
            mv cmdline-tools latest
            SDKMAN="$SDK/cmdline-tools/latest/bin/sdkmanager"
          fi
          "$SDKMAN" --version

      - name: Regenerate Android project (Flutter 3.27+)
        run: |
          set -e
          cd "$APP_DIR"
          rm -rf android
          flutter create --platforms=android .

      - name: Accept licenses & ensure at least one NDK 27.x
        run: |
          set -e
          SDKMAN="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager"
          yes | "$SDKMAN" --licenses >/dev/null
          yes | "$SDKMAN" --install "ndk;27.0.12077973" || true
          ls -la "$ANDROID_SDK_ROOT/ndk" || true

      - name: Resolve NDK 27.x and write local.properties (ndk.dir + flutter.ndkVersion)
        run: |
          set -e
          APP_DIR="${APP_DIR:-.}"
          NDK_ROOT="$ANDROID_SDK_ROOT/ndk"
          CANDIDATE=""
          if [ -d "$NDK_ROOT" ]; then
            CANDIDATE=$(ls -1 "$NDK_ROOT" | grep '^27' | sort -V | tail -n1 || true)
          fi
          if [ -z "$CANDIDATE" ] || [ ! -f "$NDK_ROOT/$CANDIDATE/source.properties" ]; then
            SDKMAN="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager"
            yes | "$SDKMAN" --install "ndk;27.0.12077973"
            CANDIDATE="27.0.12077973"
          fi
          echo "Using NDK: $NDK_ROOT/$CANDIDATE"
          echo "NDK_CAND=$CANDIDATE" >> "$GITHUB_ENV"

          LP="$APP_DIR/android/local.properties"
          mkdir -p "$APP_DIR/android"
          touch "$LP"
          { grep -v -E '^(ndk\.dir|flutter\.ndkVersion)=' "$LP" 2>/dev/null || true; } > "$LP.tmp"
          mv "$LP.tmp" "$LP"
          echo "ndk.dir=$NDK_ROOT/$CANDIDATE" >> "$LP"
          echo "flutter.ndkVersion=$CANDIDATE" >> "$LP"
          echo "--- local.properties ---"
          cat "$LP"

      - name: Normalize any 26.x to ${NDK_CAND} (Gradle files)
        run: |
          set -e
          python3 - <<'PY'
          import io, os, re
          app_dir = os.environ.get('APP_DIR','.') or '.'
          ndk = os.environ.get('NDK_CAND','27.0.12077973')
          def rw(path, fn):
              if not os.path.isfile(path): return
              with io.open(path,'r',encoding='utf-8') as f: s=f.read()
              ns = fn(s)
              if ns != s:
                  with io.open(path,'w',encoding='utf-8') as f: f.write(ns)
                  print(f'[patched] {path}')
          # android/gradle.properties
          props = os.path.join(app_dir,'android','gradle.properties')
          lines=[]
          if os.path.exists(props):
              with io.open(props,'r',encoding='utf-8') as f: lines=f.read().splitlines()
          lines=[ln for ln in lines if not ln.strip().startswith('android.ndkVersion=')]
          lines.append(f'android.ndkVersion={ndk}')
          os.makedirs(os.path.dirname(props), exist_ok=True)
          with io.open(props,'w',encoding='utf-8') as f: f.write('\\n'.join(lines)+'\\n')
          print(f'[set] android.ndkVersion={ndk} in android/gradle.properties')
          # nivel proyecto + módulo app (+ catálogos)
          for rel in ['android/build.gradle.kts','android/build.gradle',
                      'android/app/build.gradle.kts','android/app/build.gradle',
                      'android/gradle/libs.versions.toml']:
              p = os.path.join(app_dir, rel)
              rw(p, lambda s: re.sub(r'(ndkVersion\\s*=\\s*")[^"]+(")', r'\\1'+ndk+r'\\2',
                             re.sub(r"(ndkVersion\\s*')([^']+)(')", r"\\1"+ndk+r"\\3",
                             re.sub(r'(["\\\'])android\\.ndkVersion\\1\\s*[:=]\\s*(["\\\'])[0-9\\.]+(["\\\'])',
                                    lambda m: f'{m.group(1)}android.ndkVersion{m.group(1)} = "{ndk}"', s))))
          PY

      - name: Reset Gradle properties (project-only, safe)
        run: |
          set -e
          APP_DIR="${APP_DIR:-.}"
          # Reescribe gradle.properties con líneas separadas y NDK sincronizado
          cat > "$APP_DIR/android/gradle.properties" <<EOF
org.gradle.jvmargs=-Xmx4G -XX:MaxMetaspaceSize=1024m -XX:ReservedCodeCacheSize=512m -Dfile.encoding=UTF-8
android.useAndroidX=true
android.enableJetifier=true
android.ndkVersion=${NDK_CAND}
EOF
          echo "=== android/gradle.properties ==="
          cat "$APP_DIR/android/gradle.properties"

      - name: Debug NDK mentions (after patch)
        run: |
          set -e
          cd "$APP_DIR/android"
          echo ">>> ndk.dir + flutter.ndkVersion in local.properties"
          grep -nE '^(ndk\.dir|flutter\.ndkVersion)=' local.properties || true
          echo ">>> Gradle files (grep):"
          (grep -Rns --include='*.gradle*' --include='*.kts' --include='*.toml' -e 'ndkVersion' -e 'android.ndkVersion' || true)
          echo ">>> Show android/gradle.properties"
          cat gradle.properties || true
          echo ">>> Show ~/.gradle/gradle.properties"
          cat "$HOME/.gradle/gradle.properties" || true

      - name: Flutter pub get
        run: |
          cd "$APP_DIR"
          flutter pub get

      - name: Build debug APK
        env:
          ORG_GRADLE_PROJECT_android_ndkVersion: ${{ env.NDK_CAND }}
        run: |
          cd "$APP_DIR"
          echo "Building with android.ndkVersion=${ORG_GRADLE_PROJECT_android_ndkVersion}"
          flutter build apk --debug

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-debug.apk
          path: ${{ env.APP_DIR }}/build/app/outputs/flutter-apk/app-debug.apk
          if-no-files-found: error
