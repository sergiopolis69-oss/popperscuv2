name: Android Debug APK (fix v1 + NDK27)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true

      - name: Detect Flutter app directory
        run: |
          set -e
          APP_DIR="."
          for d in "." "shell_app" "app" "mobile" "client"; do
            if [ -f "$d/pubspec.yaml" ]; then APP_DIR="$d"; break; fi
          done
          echo "APP_DIR=$APP_DIR" >> "$GITHUB_ENV"
          echo "Detected APP_DIR=$APP_DIR"

      - name: Ensure Android cmdline-tools (sdkmanager)
        run: |
          set -e
          SDK="${ANDROID_SDK_ROOT:-/usr/local/lib/android/sdk}"
          SDKMAN="$SDK/cmdline-tools/latest/bin/sdkmanager"
          if [ ! -x "$SDKMAN" ]; then
            mkdir -p "$SDK/cmdline-tools"
            cd "$SDK/cmdline-tools"
            curl -sSLo cmdline-tools.zip https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip
            unzip -q cmdline-tools.zip
            rm -f cmdline-tools.zip
            rm -rf latest
            mv cmdline-tools latest
            SDKMAN="$SDK/cmdline-tools/latest/bin/sdkmanager"
          fi
          "$SDKMAN" --version

      - name: Accept licenses & ensure NDK 27 available
        run: |
          set -e
          SDKMAN="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager"
          yes | "$SDKMAN" --licenses >/dev/null
          yes | "$SDKMAN" --install "ndk;27.0.12077973" || true
          ls -la "$ANDROID_SDK_ROOT/ndk" || true

      - name: Resolve NDK 27.x and write properties
        run: |
          set -e
          APP_DIR="${APP_DIR:-.}"
          NDK_ROOT="$ANDROID_SDK_ROOT/ndk"
          CAND=$(ls -1 "$NDK_ROOT" 2>/dev/null | grep '^27' | sort -V | tail -n1 || true)
          if [ -z "$CAND" ] || [ ! -f "$NDK_ROOT/$CAND/source.properties" ]; then
            CAND="27.0.12077973"
          fi
          echo "NDK_CAND=$CAND" >> "$GITHUB_ENV"

          # local.properties
          LP="$APP_DIR/android/local.properties"
          mkdir -p "$APP_DIR/android"
          {
            echo "sdk.dir=$ANDROID_SDK_ROOT"
            echo "flutter.sdk=$(dirname "$(dirname "$(which flutter)")")"
            echo "ndk.dir=$ANDROID_SDK_ROOT/ndk/$CAND"
            echo "flutter.ndkVersion=$CAND"
          } > "$LP"
          echo "--- local.properties ---"; cat "$LP"

          # android/gradle.properties
          GP="$APP_DIR/android/gradle.properties"
          {
            echo "org.gradle.jvmargs=-Xmx4G -XX:MaxMetaspaceSize=1024m -XX:ReservedCodeCacheSize=512m -Dfile.encoding=UTF-8"
            echo "android.useAndroidX=true"
            echo "android.enableJetifier=true"
            echo "android.ndkVersion=$CAND"
          } > "$GP"
          echo "--- android/gradle.properties ---"; cat "$GP"

      - name: Fresh Gradle home (clean)
        run: |
          set -e
          GH="$RUNNER_TEMP/.gradle"
          mkdir -p "$GH"
          echo "GRADLE_USER_HOME=$GH" >> "$GITHUB_ENV"
          unset GRADLE_OPTS
          echo "org.gradle.jvmargs=-Xmx4G -XX:MaxMetaspaceSize=1024m -XX:ReservedCodeCacheSize=512m -Dfile.encoding=UTF-8" > "$GH/gradle.properties"
          echo "=== $GH/gradle.properties ==="; cat "$GH/gradle.properties"

      - name: Migrate ALL android/ sources to embedding v2
        run: |
          set -e
          APP_DIR="${APP_DIR:-.}"
          ANDROID_DIR="$APP_DIR/android"
          # 1) Reemplaza imports antiguos en .kt/.java
          find "$ANDROID_DIR" -type f \( -name "*.kt" -o -name "*.java" \) -print0 | xargs -0 -r sed -i \
            -e 's#io\.flutter\.app\.FlutterActivity#io.flutter.embedding.android.FlutterActivity#g' \
            -e 's#io\.flutter\.app\.FlutterApplication#android.app.Application#g' \
            -e '/GeneratedPluginRegistrant/d' \
            -e '/registerWith/d' \
            -e '/PluginRegistry/d'
          # 2) Limpia AndroidManifest.xml: quita FlutterApplication v1 y a√±ade meta-data v2
          find "$ANDROID_DIR/app/src" -type f -name "AndroidManifest.xml" -print0 | while IFS= read -r -d '' MAN; do
            sed -i 's#android:name="io.flutter.app.FlutterApplication"##g' "$MAN" || true
            if ! grep -q 'flutterEmbedding' "$MAN"; then
              # Inserta meta-data antes de </application>
              awk '1;/<\/application>/{print "    <meta-data android:name=\"flutterEmbedding\" android:value=\"2\"/>"}' "$MAN" > "$MAN.tmp" && mv "$MAN.tmp" "$MAN"
            fi
          done
          echo "=== Leftovers v1 (if any) ==="
          grep -Rns --include='*.kt' --include='*.java' --include='*.xml' \
            -e 'io.flutter.app.FlutterActivity' -e 'FlutterApplication' \
            -e 'GeneratedPluginRegistrant' -e 'registerWith' -e 'PluginRegistry' "$ANDROID_DIR" || true

      - name: Flutter pub get
        run: |
          cd "$APP_DIR"
          flutter pub get

      - name: Build debug APK (verbose)
        env:
          ORG_GRADLE_PROJECT_android_ndkVersion: ${{ env.NDK_CAND }}
          GRADLE_USER_HOME: ${{ env.GRADLE_USER_HOME }}
        run: |
          set -e
          cd "$APP_DIR"
          echo "Building with android.ndkVersion=${ORG_GRADLE_PROJECT_android_ndkVersion}"
          flutter build apk --debug -v | tee build_log.txt

      - name: Upload build log (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: flutter-build-log
          path: ${{ env.APP_DIR }}/build_log.txt
          if-no-files-found: warn

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-debug.apk
          path: ${{ env.APP_DIR }}/build/app/outputs/flutter-apk/app-debug.apk
          if-no-files-found: error
